
/**
 * FSP 인터페이스 처리. 
 */
 var CspInterface = function() {

    this.init = function() {
        this.clearMap();
    }


    this.callbackMap = {};

    /**
     * 디바이스 콜이후에 콜백을 받을 함수를 등록 한다. 
     */
    this.setCallback = function(callbackKey, callback){
        this.callbackMap[callbackKey] = callback;
    }
    

    /**
     * 콜백을 실행하고, 콜백을 삭제 한다. 
     */
    this.callbackExecute = function(callbackKey, result) {
        var callback = this.callbackMap[callbackKey];
        if (callback != null) {
            callback.function(result);
        }        
    }

    /**
     * 콜백키로, 콜백의 인덱스를 리턴한다. 
     */
    this.hasCallback = function(callbackKey){
        var callback = this.callbackMap[callbackKey];
        return callback != null;
    }

    /**
     * 콜백키에 해당하는 콜백 정보를 삭제 한다. 
     */
    this.removeCallback = function(callbackKey){
        delete this.callbackMap[callbackKey];
    }

    /**
     * 콜백 함수 배열을 초기화 한다.
     */
    this.clearMap = function() {
        this.callbackMap = {};
    }
}




var cspAppInterface = new CspInterface();


// 초기화
cspAppInterface.init();


/**
 * 앱실행중에 푸시 메세지가 오면 실행된다. 
 * @param {*} msgId 
 * @param {*} subject 
 */
 function cspOnPushMessage(msgId, subject){
    const callBackResult = {status : 'success', result : {msgId : msgId, subject : subject}};
    cspAppInterface.callbackExecute('onPushMessage', callBackResult);
}


/**
 * 뒤로 가기 
 */
function cspPressBack(){
    cspAppInterface.callbackExecute('onPressBack', {});
}


/**
 * 앱에서 실행되었음을 앵귤러에 알려 줌.
 */
function cspMobileAppInit() {
    cspAppInterface.callbackExecute('onStartMobileApp', {});
}

function cspDeviceInfoCallback(event) {
    cspAppInterface.callbackExecute('onDeviceinfoCallback', event);
}